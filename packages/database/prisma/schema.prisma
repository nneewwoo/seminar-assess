generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Period {
  IDLE
  VOTING
  PRE_TEST
  SEMINAR
  POST_TEST
  EVALUATION
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  givenName  String    @map("given_name")
  familyName String    @map("family_name")
  password   String
  phone      String?
  role       UserRole  @default(USER)
  sessions   Session[]
  Vote       Vote[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime @map("expires_at")

  @@map("sessions")
}

model Cycle {
  id      String    @id @default(uuid())
  active  Boolean   @unique @default(true)
  period  Period    @default(IDLE)
  endsAt  DateTime  @map("ends_at")
  Seminar Seminar[]
  Vote    Vote[]

  @@map("cycles")
}

model Course {
  id      String    @id @default(uuid())
  name    String    @unique
  Seminar Seminar[]

  @@map("courses")
}

model Seminar {
  id          String @id @default(uuid())
  title       String
  description String
  cycleId     String @map("cycle_id")
  cycle       Cycle  @relation(fields: [cycleId], references: [id])
  courseId    String @map("course_id")
  course      Course @relation(fields: [courseId], references: [id])
  votes       Vote[]

  @@map("seminars")
}

model Vote {
  id        String  @id @default(uuid())
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  seminarId String  @map("seminar_id")
  seminar   Seminar @relation(fields: [seminarId], references: [id])
  cycleId   String  @map("cycle_id")
  cycle     Cycle   @relation(fields: [cycleId], references: [id])
  value     Int

  @@unique([userId, seminarId, cycleId])
  @@map("votes")
}
