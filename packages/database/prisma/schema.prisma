generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Period {
  IDLE
  VOTING
  PRE_TEST
  SEMINAR
  POST_TEST
  EVALUATION
}

enum Exam {
  PRE_TEST
  POST_TEST
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  name     String    @map("name")
  password String
  phone    String?
  role     UserRole  @default(USER)
  sessions Session[]
  votes    Vote[]
  answers  Answer[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime @map("expires_at")

  @@map("sessions")
}

model Cycle {
  id      String    @id @default(uuid())
  active  Boolean   @unique @default(true)
  period  Period    @default(IDLE)
  endsAt  DateTime  @map("ends_at")
  Seminar Seminar[]
  Vote    Vote[]

  @@map("cycles")
}

model Course {
  id      String    @id @default(uuid())
  name    String    @unique
  Seminar Seminar[]

  @@map("courses")
}

model Seminar {
  id          String     @id @default(uuid())
  title       String
  description String
  cycleId     String     @map("cycle_id")
  cycle       Cycle      @relation(fields: [cycleId], references: [id])
  courseId    String     @map("course_id")
  course      Course     @relation(fields: [courseId], references: [id])
  votes       Vote[]
  questions   Question[]

  @@map("seminars")
}

model Question {
  id        String   @id @default(uuid())
  text      String
  seminarId String   @map("seminar_id")
  seminar   Seminar  @relation(fields: [seminarId], references: [id])
  options   Option[]
  answers   Answer[]

  @@map("questions")
}

model Option {
  id         String   @id @default(uuid())
  label      String
  questionId String   @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])
  answers    Answer[]

  @@map("question_options")
}

model Answer {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  questionId String   @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])
  optionId   String   @map("option_id")
  option     Option   @relation(fields: [optionId], references: [id])
  for        Exam

  @@unique([userId, questionId])
  @@map("answers")
}

model Vote {
  id        String  @id @default(uuid())
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  seminarId String  @map("seminar_id")
  seminar   Seminar @relation(fields: [seminarId], references: [id])
  cycleId   String  @map("cycle_id")
  cycle     Cycle   @relation(fields: [cycleId], references: [id])
  value     Int

  @@unique([userId, seminarId, cycleId])
  @@map("votes")
}

model Otp {
  id      String @id @default(uuid())
  email   String @unique
  counter BigInt @default(0)

  @@map("otp_codes")
}
